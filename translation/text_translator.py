#!/usr/bin/env python3
"""
Module pour traduire les textes Whisper de l'anglais vers le fran√ßais
Lit les textes depuis la DB et les traduit avec une API de traduction
"""

import os
import sys
import sqlite3
from pathlib import Path
from typing import Optional, Dict, List

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, str(Path(__file__).parent.parent))

from database.manager import VideoDatabase
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.panel import Panel

# Import de la traduction
try:
    import requests
    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False
    print("‚ö†Ô∏è  Requests n'est pas install√©. Installez-le avec: pip install requests")


class TextTranslator:
    """Traduit les textes Whisper de l'anglais vers le fran√ßais"""
    
    def __init__(self):
        self.db = VideoDatabase()
        self.console = Console()
        
        # Configuration de l'API de traduction (LibreTranslate)
        self.translate_api_url = "https://libretranslate.de/translate"
        
    def translate_text(self, english_text: str) -> Optional[str]:
        """Traduit un texte anglais en fran√ßais"""
        if not REQUESTS_AVAILABLE:
            print("‚ùå Requests n'est pas disponible")
            return None
        
        try:
            print("üîÑ Traduction en fran√ßais...")
            
            # Utiliser Google Translate (m√©thode simple)
            url = "https://translate.googleapis.com/translate_a/single"
            params = {
                "client": "gtx",
                "sl": "en",
                "tl": "fr",
                "dt": "t",
                "q": english_text
            }
            
            response = requests.get(url, params=params, timeout=30)
            
            if response.status_code == 200:
                # Parse la r√©ponse de Google Translate
                data = response.json()
                french_text = ""
                
                # Extraire le texte traduit
                if data and len(data) > 0 and len(data[0]) > 0:
                    for segment in data[0]:
                        if segment[0]:  # Le texte traduit
                            french_text += segment[0]
                
                if french_text:
                    print(f"‚úÖ Traduction: {french_text[:100]}...")
                    return french_text
                else:
                    print("‚ùå Aucun texte traduit re√ßu")
                    return None
            else:
                print(f"‚ùå Erreur API: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur de traduction: {e}")
            return None
    
    def save_french_translation(self, video_id: str, french_text: str) -> bool:
        """Sauvegarde la traduction fran√ßaise dans la base de donn√©es"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # Ins√©rer ou mettre √† jour l'enregistrement
                cursor.execute('''
                    INSERT OR REPLACE INTO whisper_translations 
                    (video_id, french_text, created_at)
                    VALUES (?, ?, datetime('now'))
                ''', (video_id, french_text))
                
                conn.commit()
                
            print(f"üíæ Traduction fran√ßaise sauvegard√©e pour {video_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {e}")
            return False
    
    def get_whisper_texts_without_translation(self) -> List[Dict]:
        """R√©cup√®re les textes Whisper qui n'ont pas de traduction fran√ßaise"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # R√©cup√©rer les textes Whisper sans traduction fran√ßaise
                cursor.execute('''
                    SELECT w.video_id, w.translated_text, v.title
                    FROM whisper_texts w
                    LEFT JOIN videos v ON w.video_id = v.video_id
                    LEFT JOIN whisper_translations wt ON w.video_id = wt.video_id
                    WHERE wt.video_id IS NULL
                    ORDER BY w.created_at DESC
                ''')
                
                results = cursor.fetchall()
                
                texts_without_translation = []
                for video_id, english_text, title in results:
                    texts_without_translation.append({
                        "video_id": video_id,
                        "english_text": english_text,
                        "title": title or video_id
                    })
                
                return texts_without_translation
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration: {e}")
            return []
    
    def process_single_translation(self, video_id: str) -> bool:
        """Traite la traduction d'un seul texte"""
        try:
            # R√©cup√©rer le texte anglais depuis la DB
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT translated_text FROM whisper_texts 
                    WHERE video_id = ?
                ''', (video_id,))
                
                result = cursor.fetchone()
                if not result:
                    print(f"‚ùå Aucun texte Whisper trouv√© pour {video_id}")
                    return False
                
                english_text = result[0]
            
            print(f"üé¨ Traduction de: {video_id}")
            print(f"üìù Texte anglais: {english_text[:100]}...")
            
            # Traduire en fran√ßais
            french_text = self.translate_text(english_text)
            if not french_text:
                return False
            
            # Sauvegarder
            return self.save_french_translation(video_id, french_text)
            
        except Exception as e:
            print(f"‚ùå Erreur lors du traitement de {video_id}: {e}")
            return False
    
    def batch_translate_texts(self, limit: int = 20):
        """Traduit plusieurs textes en lot"""
        texts = self.get_whisper_texts_without_translation()
        
        if not texts:
            print("‚úÖ Tous les textes Whisper ont d√©j√† √©t√© traduits en fran√ßais")
            return
        
        # Limiter le nombre pour les tests
        texts = texts[:limit]
        
        print(f"üéØ {len(texts)} textes √† traduire en fran√ßais")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("üåê Traduction fran√ßaise...", total=len(texts))
            
            for text in texts:
                progress.update(task, description=f"üåê Traduction: {text['title'][:30]}...")
                
                success = self.process_single_translation(text['video_id'])
                
                if not success:
                    print(f"‚ùå √âchec de la traduction pour {text['video_id']}")
                
                progress.advance(task)
        
        print("‚úÖ Traduction fran√ßaise termin√©e")
    
    def read_french_translation(self, video_id: str):
        """Lit une traduction fran√ßaise existante"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT french_text FROM whisper_translations 
                    WHERE video_id = ?
                ''', (video_id,))
                
                result = cursor.fetchone()
                if result:
                    french_text = result[0]
                    print(f"üìñ Traduction fran√ßaise pour {video_id}:")
                    print(f"üá´üá∑ Texte: {french_text}")
                else:
                    print(f"‚ùå Aucune traduction fran√ßaise trouv√©e pour {video_id}")
                    
        except Exception as e:
            print(f"‚ùå Erreur lors de la lecture: {e}")


def create_whisper_translations_table():
    """Cr√©e la table whisper_translations"""
    db = VideoDatabase()
    
    try:
        with sqlite3.connect(db.db_path) as conn:
            cursor = conn.cursor()
            
            # Cr√©er la table whisper_translations
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS whisper_translations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    video_id TEXT NOT NULL,
                    french_text TEXT NOT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (video_id) REFERENCES videos (video_id)
                )
            ''')
            
            # Cr√©er un index pour am√©liorer les performances
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_whisper_translations_video_id 
                ON whisper_translations (video_id)
            ''')
            
            conn.commit()
            print("‚úÖ Table whisper_translations cr√©√©e avec succ√®s")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la table: {e}")


def main():
    """Interface principale du module TextTranslator"""
    console = Console()
    
    if not REQUESTS_AVAILABLE:
        console.print(Panel(
            "‚ùå Requests n'est pas install√©\n\n"
            "Installez-le avec:\n"
            "pip install requests",
            title="Installation requise",
            style="red"
        ))
        return
    
    # Cr√©er la table si elle n'existe pas
    create_whisper_translations_table()
    
    translator = TextTranslator()
    
    while True:
        console.print("\n" + "="*50)
        console.print(Panel(
            "üåê Traducteur de Textes Whisper",
            style="bold green"
        ))
        
        print("\nOptions disponibles:")
        print("1. üåê Traduire un texte sp√©cifique")
        print("2. üîÑ Traduction en lot (limit√© √† 20 textes)")
        print("3. üìä Afficher les statistiques")
        print("4. üîç Lister les textes sans traduction fran√ßaise")
        print("5. üìñ Lire une traduction fran√ßaise existante")
        print("0. ‚ùå Retour")
        
        choice = input("\nüéØ Votre choix (0-5): ").strip()
        
        if choice == "0":
            break
        elif choice == "1":
            video_id = input("üé¨ ID du fichier audio: ").strip()
            
            success = translator.process_single_translation(video_id)
            if success:
                print("‚úÖ Traduction fran√ßaise termin√©e avec succ√®s")
            else:
                print("‚ùå √âchec de la traduction fran√ßaise")
        elif choice == "2":
            limit = input("üìä Nombre max de textes (Enter pour 20): ").strip() or "20"
            translator.batch_translate_texts(int(limit))
        elif choice == "3":
            # Statistiques
            with sqlite3.connect(translator.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM whisper_translations")
                count = cursor.fetchone()[0]
                print(f"üìä {count} traductions fran√ßaises g√©n√©r√©es")
        elif choice == "4":
            texts = translator.get_whisper_texts_without_translation()
            print(f"üîç {len(texts)} textes sans traduction fran√ßaise")
            for text in texts[:10]:  # Afficher les 10 premiers
                print(f"  - {text['video_id']}: {text['title']}")
        elif choice == "5":
            video_id = input("üé¨ ID du fichier audio: ").strip()
            translator.read_french_translation(video_id)
        else:
            print("‚ùå Choix invalide")


if __name__ == "__main__":
    main() 