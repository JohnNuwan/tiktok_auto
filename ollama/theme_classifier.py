#!/usr/bin/env python3
"""
Module d'analyse th√©matique avec Ollama
Classifie automatiquement les vid√©os par th√®me (motivation, succ√®s, etc.)
"""

import os
import sys
import json
import requests
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from typing import List, Dict, Optional, Tuple
from rich import print
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.panel import Panel
from rich.table import Table

from database.manager import VideoDatabase
from config import Config

class ThemeClassifier:
    """Classifieur th√©matique utilisant Ollama"""

    def __init__(self, ollama_url: str = None, model: str = None):
        self.ollama_url = ollama_url or Config.OLLAMA_HOST
        self.model = model or Config.OLLAMA_MODEL
        self.db = VideoDatabase()
        self.console = Console()

        # Th√®mes support√©s avec leurs descriptions
        self.themes = {
            "motivation": "Discours motivants, encouragement, inspiration personnelle",
            "success": "Histoires de r√©ussite, accomplissements, victoires",
            "philosophy": "R√©flexions profondes, sagesse, pens√©e philosophique",
            "discipline": "Autodiscipline, habitudes, routines, pers√©v√©rance",
            "growth": "D√©veloppement personnel, apprentissage, am√©lioration",
            "failure": "Le√ßons d'√©chec, r√©silience, rebond apr√®s √©chec",
            "leadership": "Leadership, management, influence, direction",
            "mindset": "√âtat d'esprit, mentalit√©, fa√ßon de penser",
            "business": "Entrepreneuriat, business, strat√©gie commerciale",
            "health": "Sant√©, bien-√™tre, fitness, mode de vie sain"
        }

        # V√©rifier la connexion Ollama
        self._check_ollama_connection()

    def _check_ollama_connection(self):
        """V√©rifie la connexion √† Ollama"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get("models", [])
                model_names = [model["name"] for model in models]
                
                if self.model in model_names:
                    print(f"‚úÖ Ollama connect√© - Mod√®le {self.model} disponible")
                else:
                    print(f"‚ö†Ô∏è  Mod√®le {self.model} non trouv√©. Mod√®les disponibles: {', '.join(model_names[:3])}")
                    if model_names:
                        self.model = model_names[0]
                        print(f"üîÑ Utilisation du mod√®le: {self.model}")
            else:
                print(f"‚ùå Erreur de connexion Ollama: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Impossible de se connecter √† Ollama: {e}")
            print("üí° Assurez-vous qu'Ollama est install√© et en cours d'ex√©cution")

    def _generate_prompt(self, title: str, description: str) -> str:
        """G√©n√®re le prompt pour la classification"""
        themes_list = "\n".join([f"- {theme}: {desc}" for theme, desc in self.themes.items()])
        
        prompt = f"""Analyse le contenu suivant et classe-le dans UN SEUL th√®me parmi ceux list√©s.

Titre: {title}
Description: {description}

Th√®mes disponibles:
{themes_list}

R√©ponds UNIQUEMENT avec le nom du th√®me (ex: "motivation", "success", etc.) sans ponctuation ni explication."""

        return prompt

    def classify_video(self, video_id: str, title: str, description: str) -> Optional[str]:
        """Classifie une vid√©o par th√®me"""
        try:
            prompt = self._generate_prompt(title, description)
            
            # Appel √† l'API Ollama
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json={
                    "model": self.model,
                    "prompt": prompt,
                    "stream": False
                },
                timeout=30
            )

            if response.status_code == 200:
                result = response.json()
                theme = result.get("response", "").strip().lower()
                
                # Nettoyer la r√©ponse
                theme = theme.replace(".", "").replace("!", "").replace("?", "").strip()
                
                # Mapping des variations de th√®mes
                theme_mapping = {
                    "motivational": "motivation",
                    "motivating": "motivation",
                    "inspiration": "motivation",
                    "inspiring": "motivation",
                    "successful": "success",
                    "achievement": "success",
                    "philosophical": "philosophy",
                    "wise": "philosophy",
                    "disciplined": "discipline",
                    "growth": "growth",
                    "personal growth": "growth",
                    "self improvement": "growth",
                    "failure": "failure",
                    "failures": "failure",
                    "resilience": "failure",
                    "leader": "leadership",
                    "leading": "leadership",
                    "mindset": "mindset",
                    "attitude": "mindset",
                    "business": "business",
                    "entrepreneur": "business",
                    "entrepreneurship": "business",
                    "healthy": "health",
                    "fitness": "health",
                    "wellness": "health"
                }
                
                # Appliquer le mapping si n√©cessaire
                if theme in theme_mapping:
                    theme = theme_mapping[theme]
                
                # V√©rifier que le th√®me est valide
                if theme in self.themes:
                    return theme
                else:
                    print(f"‚ö†Ô∏è  Th√®me non reconnu: '{theme}' pour la vid√©o {video_id}")
                    return "other"
            else:
                print(f"‚ùå Erreur API Ollama: {response.status_code}")
                return None

        except Exception as e:
            print(f"‚ùå Erreur lors de la classification de {video_id}: {e}")
            return None

    def update_video_theme(self, video_id: str, theme: str):
        """Met √† jour le th√®me d'une vid√©o dans la base de donn√©es"""
        try:
            import sqlite3
            # V√©rifier si la colonne theme existe, sinon l'ajouter
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                
                # V√©rifier si la colonne theme existe
                cursor.execute("PRAGMA table_info(videos)")
                columns = [column[1] for column in cursor.fetchall()]
                
                if "theme" not in columns:
                    print("üîÑ Ajout de la colonne 'theme' √† la table videos...")
                    cursor.execute("ALTER TABLE videos ADD COLUMN theme TEXT")
                
                # Mettre √† jour le th√®me
                cursor.execute(
                    "UPDATE videos SET theme = ? WHERE video_id = ?",
                    (theme, video_id)
                )
                
                if cursor.rowcount > 0:
                    print(f"‚úÖ Th√®me mis √† jour: {video_id} -> {theme}")
                else:
                    print(f"‚ö†Ô∏è  Vid√©o {video_id} non trouv√©e")

        except Exception as e:
            print(f"‚ùå Erreur lors de la mise √† jour du th√®me: {e}")

    def classify_all_videos(self, force_reclassify: bool = False):
        """Classifie toutes les vid√©os de la base de donn√©es"""
        try:
            # R√©cup√©rer toutes les vid√©os
            videos = self.db.list_all_videos()
            
            if not videos:
                print("‚ùå Aucune vid√©o trouv√©e dans la base de donn√©es")
                return

            # Filtrer les vid√©os √† classifier
            if force_reclassify:
                videos_to_classify = videos
                print(f"üîÑ Reclassification forc√©e de {len(videos)} vid√©os")
            else:
                # V√©rifier quelles vid√©os n'ont pas de th√®me
                videos_to_classify = []
                for video in videos:
                    video_id = video[0]
                    with sqlite3.connect(self.db.db_path) as conn:
                        cursor = conn.cursor()
                        cursor.execute("SELECT theme FROM videos WHERE video_id = ?", (video_id,))
                        result = cursor.fetchone()
                        if not result or not result[0]:
                            videos_to_classify.append(video)

                print(f"üéØ {len(videos_to_classify)} vid√©os √† classifier sur {len(videos)} total")

            if not videos_to_classify:
                print("‚úÖ Toutes les vid√©os sont d√©j√† classifi√©es")
                return

            # Classifier les vid√©os
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console
            ) as progress:
                task = progress.add_task("üß† Classification en cours...", total=len(videos_to_classify))

                for video in videos_to_classify:
                    video_id, title, description = video[0], video[1], video[2]
                    progress.update(task, description=f"üß† Classification: {title[:30]}...")

                    theme = self.classify_video(video_id, title, description)
                    if theme:
                        self.update_video_theme(video_id, theme)

                    progress.advance(task)

            print("‚úÖ Classification termin√©e")

        except Exception as e:
            print(f"‚ùå Erreur lors de la classification en lot: {e}")

    def get_theme_statistics(self) -> Dict[str, int]:
        """R√©cup√®re les statistiques par th√®me"""
        try:
            with sqlite3.connect(self.db.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT theme, COUNT(*) as count 
                    FROM videos 
                    WHERE theme IS NOT NULL 
                    GROUP BY theme 
                    ORDER BY count DESC
                """)
                
                stats = {}
                for theme, count in cursor.fetchall():
                    stats[theme] = count
                
                return stats

        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {e}")
            return {}

    def display_theme_statistics(self):
        """Affiche les statistiques th√©matiques"""
        stats = self.get_theme_statistics()
        
        if not stats:
            print("üìä Aucune statistique disponible")
            return

        table = Table(title="üìä Statistiques par th√®me")
        table.add_column("Th√®me", style="cyan")
        table.add_column("Nombre de vid√©os", style="green")
        table.add_column("Description", style="yellow")

        total_videos = sum(stats.values())
        
        for theme, count in stats.items():
            description = self.themes.get(theme, "Th√®me personnalis√©")
            percentage = (count / total_videos * 100) if total_videos > 0 else 0
            table.add_row(
                f"{theme} ({percentage:.1f}%)",
                str(count),
                description
            )

        self.console.print(table)
        print(f"üìà Total: {total_videos} vid√©os classifi√©es")

    def list_unclassified_videos(self) -> List[Tuple[str, str]]:
        """Liste les vid√©os non classifi√©es"""
        try:
            with self.db.db_path as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT video_id, title 
                    FROM videos 
                    WHERE theme IS NULL OR theme = ''
                    ORDER BY created_at DESC
                """)
                
                return cursor.fetchall()

        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des vid√©os non classifi√©es: {e}")
            return []

def main():
    """Interface principale du classifieur th√©matique"""
    console = Console()

    classifier = ThemeClassifier()

    while True:
        console.print(Panel.fit(
            "üß† Classifieur Th√©matique avec Ollama",
            style="bold blue"
        ))

        print("\nOptions disponibles:")
        print("1. üéØ Classifier une vid√©o sp√©cifique")
        print("2. üîÑ Classifier toutes les vid√©os")
        print("3. üìä Afficher les statistiques th√©matiques")
        print("4. üîç Lister les vid√©os non classifi√©es")
        print("5. üé® Lister les th√®mes disponibles")
        print("0. ‚ùå Retour")

        choice = input("\nüéØ Votre choix (0-5): ").strip()

        if choice == "0":
            break
        elif choice == "1":
            video_id = input("üìπ ID de la vid√©o: ").strip()
            if video_id:
                # R√©cup√©rer les infos de la vid√©o
                video_info = classifier.db.get_video_info(video_id)
                if video_info:
                    title = video_info.get('title', '')
                    description = video_info.get('description', '')
                    
                    print(f"üéØ Classification de: {title}")
                    theme = classifier.classify_video(video_id, title, description)
                    if theme:
                        classifier.update_video_theme(video_id, theme)
                        print(f"‚úÖ Th√®me assign√©: {theme}")
                else:
                    print("‚ùå Vid√©o non trouv√©e")
        elif choice == "2":
            force = input("üîÑ Forcer la reclassification ? (y/N): ").strip().lower() == 'y'
            classifier.classify_all_videos(force_reclassify=force)
        elif choice == "3":
            classifier.display_theme_statistics()
        elif choice == "4":
            unclassified = classifier.list_unclassified_videos()
            if unclassified:
                print(f"\nüîç {len(unclassified)} vid√©os non classifi√©es:")
                for i, (video_id, title) in enumerate(unclassified[:10], 1):
                    print(f"{i}. {video_id} - {title[:50]}...")
                if len(unclassified) > 10:
                    print(f"... et {len(unclassified) - 10} autres")
            else:
                print("‚úÖ Toutes les vid√©os sont classifi√©es")
        elif choice == "5":
            table = Table(title="üé® Th√®mes disponibles")
            table.add_column("Th√®me", style="cyan")
            table.add_column("Description", style="yellow")
            
            for theme, description in classifier.themes.items():
                table.add_row(theme, description)
            
            console.print(table)
        else:
            print("‚ùå Choix invalide")

if __name__ == "__main__":
    main() 