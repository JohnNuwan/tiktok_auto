#!/usr/bin/env python3
"""
Script d'automatisation pour cr√©er des vid√©os TikTok compl√®tes
Automatise tout le processus : t√©l√©chargement ‚Üí transcription ‚Üí traduction ‚Üí TTS ‚Üí montage
"""

import os
import sys
from pathlib import Path
from rich import print
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.panel import Panel

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, str(Path(__file__).parent))

from database.manager import VideoDatabase
from translation.whisper_simple import WhisperSimple
from translation.text_translator import TextTranslator
from translation.tts_simple import TTSSimple
from montage.video_builder import VideoBuilder

class AutoVideoCreator:
    """Automatise la cr√©ation compl√®te de vid√©os TikTok"""
    
    def __init__(self):
        self.console = Console()
        self.db = VideoDatabase()
        
        # Initialiser les modules
        self.whisper = WhisperSimple()
        self.translator = TextTranslator()
        self.tts = TTSSimple()
        self.video_builder = VideoBuilder()
        
    def get_videos_without_processing(self):
        """R√©cup√®re les vid√©os qui n'ont pas encore √©t√© trait√©es"""
        try:
            with self.db.connect() as conn:
                cursor = conn.cursor()
                
                # Vid√©os sans transcription
                cursor.execute('''
                    SELECT v.video_id, v.title, v.duration
                    FROM videos v
                    LEFT JOIN whisper_texts wt ON v.video_id = wt.video_id
                    WHERE wt.video_id IS NULL
                    ORDER BY v.created_at DESC
                    LIMIT 10
                ''')
                
                return cursor.fetchall()
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration: {e}")
            return []
    
    def process_single_video(self, video_id: str, title: str):
        """Traite une vid√©o compl√®te : transcription ‚Üí traduction ‚Üí TTS ‚Üí montage"""
        print(f"\nüé¨ Traitement de: {title} ({video_id})")
        
        try:
            # √âtape 1: Transcription Whisper
            print("üé§ √âtape 1: Transcription Whisper...")
            success = self.whisper.process_single_audio(video_id)
            if not success:
                print(f"‚ùå √âchec de la transcription pour {video_id}")
                return False
            
            # √âtape 2: Traduction du texte
            print("üåç √âtape 2: Traduction du texte...")
            success = self.translator.process_single_translation(video_id)
            if not success:
                print(f"‚ùå √âchec de la traduction pour {video_id}")
                return False
            
            # √âtape 3: G√©n√©ration TTS
            print("üéµ √âtape 3: G√©n√©ration audio TTS...")
            success = self.tts.process_single_tts(video_id)
            if not success:
                print(f"‚ùå √âchec du TTS pour {video_id}")
                return False
            
            # √âtape 4: Montage vid√©o
            print("üé¨ √âtape 4: Montage vid√©o...")
            videos_with_tts = self.video_builder.get_videos_with_tts()
            video_data = next((v for v in videos_with_tts if v['video_id'] == video_id), None)
            
            if video_data:
                success = self.video_builder.process_single_video(video_data)
                if success:
                    print(f"‚úÖ Vid√©o compl√®te cr√©√©e pour {video_id}")
                    return True
                else:
                    print(f"‚ùå √âchec du montage pour {video_id}")
                    return False
            else:
                print(f"‚ö†Ô∏è Donn√©es vid√©o non trouv√©es pour {video_id}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors du traitement de {video_id}: {e}")
            return False
    
    def batch_process_videos(self, limit: int = 5):
        """Traite plusieurs vid√©os en lot"""
        videos = self.get_videos_without_processing()
        
        if not videos:
            print("‚úÖ Toutes les vid√©os ont d√©j√† √©t√© trait√©es")
            return
        
        videos = videos[:limit]
        print(f"üéØ Traitement de {len(videos)} vid√©os...")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("üé¨ Traitement des vid√©os...", total=len(videos))
            
            success_count = 0
            for video_id, title, duration in videos:
                progress.update(task, description=f"üé¨ {title[:30]}...")
                
                success = self.process_single_video(video_id, title)
                if success:
                    success_count += 1
                
                progress.advance(task)
        
        print(f"\n‚úÖ Traitement termin√©: {success_count}/{len(videos)} vid√©os r√©ussies")
    
    def show_status(self):
        """Affiche le statut actuel du syst√®me"""
        try:
            with self.db.connect() as conn:
                cursor = conn.cursor()
                
                # Statistiques g√©n√©rales
                cursor.execute("SELECT COUNT(*) FROM videos")
                total_videos = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM whisper_texts")
                transcribed = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM whisper_translations")
                translated = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM tts_outputs")
                tts_generated = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM final_videos")
                final_videos = cursor.fetchone()[0]
                
                print("\nüìä Statut du syst√®me:")
                print(f"üìπ Vid√©os totales: {total_videos}")
                print(f"üé§ Transcrites: {transcribed}")
                print(f"üåç Traduites: {translated}")
                print(f"üéµ TTS g√©n√©r√©s: {tts_generated}")
                print(f"üé¨ Vid√©os finales: {final_videos}")
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'affichage du statut: {e}")

def main():
    """Interface principale"""
    console = Console()
    
    console.print(Panel(
        "üé¨ Cr√©ateur Automatique de Vid√©os TikTok",
        style="bold magenta"
    ))
    
    creator = AutoVideoCreator()
    
    while True:
        print("\nOptions disponibles:")
        print("1. üé¨ Traiter des vid√©os automatiquement")
        print("2. üìä Afficher le statut")
        print("3. üéØ Traiter une vid√©o sp√©cifique")
        print("0. ‚ùå Quitter")
        
        choice = input("\nüéØ Votre choix (0-3): ").strip()
        
        if choice == "0":
            break
        elif choice == "1":
            limit = input("üìä Nombre de vid√©os √† traiter (Enter pour 5): ").strip() or "5"
            creator.batch_process_videos(int(limit))
        elif choice == "2":
            creator.show_status()
        elif choice == "3":
            video_id = input("üé¨ ID de la vid√©o: ").strip()
            if video_id:
                # R√©cup√©rer les infos de la vid√©o
                try:
                    with creator.db.connect() as conn:
                        cursor = conn.cursor()
                        cursor.execute("SELECT title FROM videos WHERE video_id = ?", (video_id,))
                        result = cursor.fetchone()
                        if result:
                            creator.process_single_video(video_id, result[0])
                        else:
                            print(f"‚ùå Vid√©o {video_id} non trouv√©e")
                except Exception as e:
                    print(f"‚ùå Erreur: {e}")
        else:
            print("‚ùå Choix invalide")

if __name__ == "__main__":
    main() 